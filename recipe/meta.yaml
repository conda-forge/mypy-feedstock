{% set version = "1.13.0" %}

package:
  name: mypy-split
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/m/mypy/mypy-{{ version }}.tar.gz
  sha256: 0291a61b6fbf3e6673e3405cfcc0e7650bebc7939659fdca2702958038bd835e

build:
  number: 0

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - {{ compiler('c') }}                    # [python_impl == "cpython"]
    - {{ stdlib("c") }}                      # [python_impl == "cpython"]
  host:
    - python

outputs:
  - name: mypy
    build:
      script_env:
        - MYPY_USE_MYPYC=1                 # [python_impl == "cpython"]
        - SETUPTOOLS_USE_DISTUTILS=stdlib  # [py<312]
      script:
        # mypy searches for <>-stubs in site.getsitepackages()
        # which points to $SP_DIR, even in cross-python
        - cp -rv $BUILD_PREFIX/lib/python$PY_VER/site-packages/*-stubs $SP_DIR  # [build_platform != target_platform]
        - cp -rv $BUILD_PREFIX/lib/python$PY_VER/site-packages/tomli* $SP_DIR   # [build_platform != target_platform]
        # Work around slow compile times on these systems:
        - export MYPYC_MULTI_FILE=1  # [(ppc64le or aarch64) and py==312]
        - {{ PYTHON }} -m pip install . --no-deps -vv --no-build-isolation --disable-pip-version-check
        - rm -rf $SP_DIR/*-stubs $SP_DIR/tomli*                                 # [build_platform != target_platform]
      entry_points:
        - mypy = mypy.__main__:console_entry
        - stubgen = mypy.stubgen:main
        - dmypy = mypy.dmypy.client:console_entry
        # doesn't work in pypy
        - stubtest = mypy.stubtest:main
        # CLI provided here, but doesn't depend on a compiler (or work in pypy)
        - mypyc = mypyc.__main__:main

    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - {{ compiler('c') }}                    # [python_impl == "cpython"]
        - {{ stdlib("c") }}                      # [python_impl == "cpython"]
        - tomli >=1.1.0
      host:
        - mypy_extensions >=1.0.0
        - pip
        - python
        - setuptools >=40.6.2
        - tomli >=1.1.0  # [py<311]
        - types-psutil
        - types-setuptools
        - typing_extensions >=4.1.0
        - wheel >=0.30.0
      run:
        - python
        - mypy_extensions >=1.0.0
        - typing_extensions >=4.1.0
        - tomli >=1.1.0  # [py<311]
        # extra: dmypy
        - psutil >=4.0

    test:
      # TODO: attempt re-enabling in >=1.9.1
      # source_files:
      #   - mypy_self_check.ini
      requires:
        - pip
      imports:
        - mypy
        - mypy.dmypy
        - mypy.plugins
        - mypy.server
        - mypyc  # [python_impl == "cpython"]
      commands:
        - mkdir tmp || md tmp
        - cd tmp
        - pip check
        - dmypy --help
        - mypy --help
        - stubgen --help
        # `stubtest.py` imports `symtable`, not available in pypy
        - stubtest --help                # [python_impl == "cpython"]
        - dir %SP_DIR%\mypy\*.pyd /s /b  # [win and python_impl == "cpython"]
        - ls $SP_DIR/mypy/*.so           # [linux and not (aarch64 and py == 310) and python_impl == "cpython"]
        # TODO: attempt re-enabling in >=1.9.1
        # - mypy --config-file=mypy_self_check.ini -p mypy --python-version=3.9

  - name: mypyc
    build:
      skip: true  # [python_impl != "cpython"]
    requirements:
      host:
        - python
      run:
        - {{ pin_subpackage("mypy", exact=True) }}
        - {{ compiler('c') }}
        - python
        - setuptools >=50
    test:
      files:
        - test_mypyc.py
      requires:
        - pip
      commands:
        - pip check
        - mypyc --help
        - python test_mypyc.py
    about:
      home: https://mypyc.readthedocs.io
      license: MIT
      license_family: MIT
      license_file: LICENSE
      dev_url: https://github.com/python/mypy/blob/master/mypyc
      summary: Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code.
      description: |
        The compiled language is a strict, gradually typed Python variant. It
        restricts the use of some dynamic Python features to gain performance,
        but it's mostly compatible with standard Python.

        Mypyc uses mypy to perform type checking and type inference. Most type
        system features in the stdlib typing module are supported.

        Compiled modules can import arbitrary Python modules and third-party
        libraries. You can compile anything from a single performance-critical
        module to your entire codebase. You can run the modules you compile also
        as normal, interpreted Python modules.

        Existing code with type annotations is often 1.5x to 5x faster when
        compiled. Code tuned for mypyc can be 5x to 10x faster.

        Mypyc currently aims to speed up non-numeric code, such as server
        applications. Mypyc is also used to compile itself (and mypy).

about:
  home: http://mypy-lang.org
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: Optional static typing for Python
  description: |
    Add type annotations to your Python programs, and use mypy to type check
    them. Mypy is essentially a Python linter on steroids, and it can catch
    many programming errors by analyzing your program, without actually having
    to run it.  Mypy has a powerful type system with features such as type
    inference, gradual typing, generics and union types.
  doc_url: http://mypy.readthedocs.io
  dev_url: https://github.com/python/mypy

extra:
  feedstock-name: mypy
  recipe-maintainers:
    - nehaljwani
    - ocefpaf
    - matthiasdiener
    - bollwyvl
